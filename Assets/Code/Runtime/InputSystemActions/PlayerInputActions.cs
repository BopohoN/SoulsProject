//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Code/Runtime/InputSystemActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Code.InputSystemActions
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""bec8dcd8-01d5-4ca7-8dc2-18636db17027"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4c740c64-fc4f-49b1-b3eb-04c52253ca91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""9ebbb9bd-0896-45dc-889f-5d670413e5cf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5e939a0-a781-4a4e-ab1a-4cc74df28bd6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecbaf5ac-065f-42ef-9eaa-c4234f537a91"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Actions"",
            ""id"": ""e25be114-4ca5-4abf-bfff-4adb87dfef1f"",
            ""actions"": [
                {
                    ""name"": ""RollAndSprint"",
                    ""type"": ""Button"",
                    ""id"": ""defe3aa8-6e1b-4326-ab92-2a7a4bad2e8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""a70e5954-b960-450d-bf80-d26495370f99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""ca3851d9-087e-4fde-9e98-94a85641eb31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5134b05-c6f4-42ae-81e4-b65296848592"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Tap,Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollAndSprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""503ab5b1-7a87-489f-ac89-7b64d5afc8aa"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6002442e-9098-4fa7-ad41-60ed629fd5c9"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Quick Inventory"",
            ""id"": ""790cab90-e461-4c75-b018-8fe135210363"",
            ""actions"": [
                {
                    ""name"": ""D-Pad Up"",
                    ""type"": ""Button"",
                    ""id"": ""4b9ab4ad-87d3-48f7-bd50-d0c2cfc2eae4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad Down"",
                    ""type"": ""Button"",
                    ""id"": ""90dce29b-b049-4074-910e-91e3ac222cc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad Right"",
                    ""type"": ""Button"",
                    ""id"": ""263b6449-7f14-4d88-a091-a13ca2b91025"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad Left"",
                    ""type"": ""Button"",
                    ""id"": ""8d4f27ea-cd10-4c54-921a-acb36b68d0bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1608bd9b-9e4b-4055-aa46-f996e0fc7ae3"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": ""Hold,Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D-Pad Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e618338-2718-48ee-9a49-ab95a361ef89"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": ""Hold,Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D-Pad Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f87ab24b-6100-493e-9a81-aa983112e194"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": ""Hold,Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D-Pad Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""125a4f8b-bdd3-4496-bedd-0217431b42bd"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": ""Hold,Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D-Pad Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player Movement
            m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
            m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
            m_PlayerMovement_Camera = m_PlayerMovement.FindAction("Camera", throwIfNotFound: true);
            // Player Actions
            m_PlayerActions = asset.FindActionMap("Player Actions", throwIfNotFound: true);
            m_PlayerActions_RollAndSprint = m_PlayerActions.FindAction("RollAndSprint", throwIfNotFound: true);
            m_PlayerActions_RB = m_PlayerActions.FindAction("RB", throwIfNotFound: true);
            m_PlayerActions_RT = m_PlayerActions.FindAction("RT", throwIfNotFound: true);
            // Player Quick Inventory
            m_PlayerQuickInventory = asset.FindActionMap("Player Quick Inventory", throwIfNotFound: true);
            m_PlayerQuickInventory_DPadUp = m_PlayerQuickInventory.FindAction("D-Pad Up", throwIfNotFound: true);
            m_PlayerQuickInventory_DPadDown = m_PlayerQuickInventory.FindAction("D-Pad Down", throwIfNotFound: true);
            m_PlayerQuickInventory_DPadRight = m_PlayerQuickInventory.FindAction("D-Pad Right", throwIfNotFound: true);
            m_PlayerQuickInventory_DPadLeft = m_PlayerQuickInventory.FindAction("D-Pad Left", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player Movement
        private readonly InputActionMap m_PlayerMovement;
        private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
        private readonly InputAction m_PlayerMovement_Movement;
        private readonly InputAction m_PlayerMovement_Camera;
        public struct PlayerMovementActions
        {
            private @PlayerInputActions m_Wrapper;
            public PlayerMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
            public InputAction @Camera => m_Wrapper.m_PlayerMovement_Camera;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerMovementActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
            }

            private void UnregisterCallbacks(IPlayerMovementActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Camera.started -= instance.OnCamera;
                @Camera.performed -= instance.OnCamera;
                @Camera.canceled -= instance.OnCamera;
            }

            public void RemoveCallbacks(IPlayerMovementActions instance)
            {
                if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerMovementActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

        // Player Actions
        private readonly InputActionMap m_PlayerActions;
        private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
        private readonly InputAction m_PlayerActions_RollAndSprint;
        private readonly InputAction m_PlayerActions_RB;
        private readonly InputAction m_PlayerActions_RT;
        public struct PlayerActionsActions
        {
            private @PlayerInputActions m_Wrapper;
            public PlayerActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @RollAndSprint => m_Wrapper.m_PlayerActions_RollAndSprint;
            public InputAction @RB => m_Wrapper.m_PlayerActions_RB;
            public InputAction @RT => m_Wrapper.m_PlayerActions_RT;
            public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActionsActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
                @RollAndSprint.started += instance.OnRollAndSprint;
                @RollAndSprint.performed += instance.OnRollAndSprint;
                @RollAndSprint.canceled += instance.OnRollAndSprint;
                @RB.started += instance.OnRB;
                @RB.performed += instance.OnRB;
                @RB.canceled += instance.OnRB;
                @RT.started += instance.OnRT;
                @RT.performed += instance.OnRT;
                @RT.canceled += instance.OnRT;
            }

            private void UnregisterCallbacks(IPlayerActionsActions instance)
            {
                @RollAndSprint.started -= instance.OnRollAndSprint;
                @RollAndSprint.performed -= instance.OnRollAndSprint;
                @RollAndSprint.canceled -= instance.OnRollAndSprint;
                @RB.started -= instance.OnRB;
                @RB.performed -= instance.OnRB;
                @RB.canceled -= instance.OnRB;
                @RT.started -= instance.OnRT;
                @RT.performed -= instance.OnRT;
                @RT.canceled -= instance.OnRT;
            }

            public void RemoveCallbacks(IPlayerActionsActions instance)
            {
                if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActionsActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

        // Player Quick Inventory
        private readonly InputActionMap m_PlayerQuickInventory;
        private List<IPlayerQuickInventoryActions> m_PlayerQuickInventoryActionsCallbackInterfaces = new List<IPlayerQuickInventoryActions>();
        private readonly InputAction m_PlayerQuickInventory_DPadUp;
        private readonly InputAction m_PlayerQuickInventory_DPadDown;
        private readonly InputAction m_PlayerQuickInventory_DPadRight;
        private readonly InputAction m_PlayerQuickInventory_DPadLeft;
        public struct PlayerQuickInventoryActions
        {
            private @PlayerInputActions m_Wrapper;
            public PlayerQuickInventoryActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @DPadUp => m_Wrapper.m_PlayerQuickInventory_DPadUp;
            public InputAction @DPadDown => m_Wrapper.m_PlayerQuickInventory_DPadDown;
            public InputAction @DPadRight => m_Wrapper.m_PlayerQuickInventory_DPadRight;
            public InputAction @DPadLeft => m_Wrapper.m_PlayerQuickInventory_DPadLeft;
            public InputActionMap Get() { return m_Wrapper.m_PlayerQuickInventory; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerQuickInventoryActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerQuickInventoryActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerQuickInventoryActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerQuickInventoryActionsCallbackInterfaces.Add(instance);
                @DPadUp.started += instance.OnDPadUp;
                @DPadUp.performed += instance.OnDPadUp;
                @DPadUp.canceled += instance.OnDPadUp;
                @DPadDown.started += instance.OnDPadDown;
                @DPadDown.performed += instance.OnDPadDown;
                @DPadDown.canceled += instance.OnDPadDown;
                @DPadRight.started += instance.OnDPadRight;
                @DPadRight.performed += instance.OnDPadRight;
                @DPadRight.canceled += instance.OnDPadRight;
                @DPadLeft.started += instance.OnDPadLeft;
                @DPadLeft.performed += instance.OnDPadLeft;
                @DPadLeft.canceled += instance.OnDPadLeft;
            }

            private void UnregisterCallbacks(IPlayerQuickInventoryActions instance)
            {
                @DPadUp.started -= instance.OnDPadUp;
                @DPadUp.performed -= instance.OnDPadUp;
                @DPadUp.canceled -= instance.OnDPadUp;
                @DPadDown.started -= instance.OnDPadDown;
                @DPadDown.performed -= instance.OnDPadDown;
                @DPadDown.canceled -= instance.OnDPadDown;
                @DPadRight.started -= instance.OnDPadRight;
                @DPadRight.performed -= instance.OnDPadRight;
                @DPadRight.canceled -= instance.OnDPadRight;
                @DPadLeft.started -= instance.OnDPadLeft;
                @DPadLeft.performed -= instance.OnDPadLeft;
                @DPadLeft.canceled -= instance.OnDPadLeft;
            }

            public void RemoveCallbacks(IPlayerQuickInventoryActions instance)
            {
                if (m_Wrapper.m_PlayerQuickInventoryActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerQuickInventoryActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerQuickInventoryActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerQuickInventoryActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerQuickInventoryActions @PlayerQuickInventory => new PlayerQuickInventoryActions(this);
        public interface IPlayerMovementActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnCamera(InputAction.CallbackContext context);
        }
        public interface IPlayerActionsActions
        {
            void OnRollAndSprint(InputAction.CallbackContext context);
            void OnRB(InputAction.CallbackContext context);
            void OnRT(InputAction.CallbackContext context);
        }
        public interface IPlayerQuickInventoryActions
        {
            void OnDPadUp(InputAction.CallbackContext context);
            void OnDPadDown(InputAction.CallbackContext context);
            void OnDPadRight(InputAction.CallbackContext context);
            void OnDPadLeft(InputAction.CallbackContext context);
        }
    }
}
